# Python 的内置函数 lambda zip map

# zip函数将可迭代对象作为参数，然后将传入的参数纵向合并成一个个元组，返回的是合并后的元组列表对象
# 先定义两个list
a = [1, 2, 3]
b = [4, 5, 6]
c = [7, 8, 9, 0]
# 使用zip合并以上两个list, zip返回的是对象，展示内容要先转成列表
print(list(zip(a, b, c))) # 输出值：[(1, 4, 7), (2, 5, 8), (3, 6, 9)]

# 转化后的列表长度与合并前最短的列表长度相同（木桶效应）
# zip是压缩的功能，zip(*zip())是解压的功能
print(list(zip(*zip(a, b)))) # 输出值：[(1, 2, 3), (4, 5, 6)]

# 使用lambda简单的定义一个函数
# lambda + 定义函数的参数+ ：+函数的主体运算
fun = lambda x, y:x+y
# 使用定义的fun函数
print(fun(1, 2))  # 输出值：3

# 使用map将函数和函数的参数输入简单的结合在一起,返回值是一个对象，展示需要转成列表
print(list(map(fun, [1], [2]))) # 输出值：[3]

# 使用map函数传入参数的时候可以传入多组
print(list(map(fun, [1, 2], [3, 4]))) # 输出值：[4, 6]
