# copy & deepcopy 浅拷贝和深拷贝

import copy # 首先导入copy模块

a = [1, 2, 3] # 定义一个列表
b = a # 让b等于a
# 输出b和a在计算机中占用的内存位置，会发现是相同的，也就是b和a指向的是同一个东西
print(id(b))
print(id(a))
# b和a是相同的，这时候改变b会发现a也随着改变
b[1] = 11
print(b)
print(a)
# python中的 = 是将两个索引都指向计算机中的同一个位置

# copy 浅拷贝
c = [1, 2, [3, 4]] # 定义一个列表,列表中包含另一个列表
d = copy.copy(c) # 使用copy函数将列表c复制给d
# 输出c和d在计算机中占用的内存位置，会发现是不同的，说明copy函数复制的列表d和列表c代表的不是一个东西
print(id(c), id(d))
# 若改变列表d的常数元素，列表c不会随之改变
d[1] = 11
print(d, c)
# 若改变列表d的列表元素中的元素，列表c会随之改变
d[2][1] = 11
print(d, c)

# deepcopy 深拷贝
e = [2, 3, [0, 1]] # 同样定义一个列表,列表中包含另一个列表
f = copy.deepcopy(e) # 使用copy函数将列表e复制给f
# 输出e和f在计算机中占用的内存位置，会发现是不同的，说明copy函数复制的列表f和列表e代表的不是一个东西
print(id(c), id(d))
# 若改变列表f的常数元素，列表e不会随之改变
f[1] = 11
print(e, f)
# 若改变列表f的列表元素中的元素，列表e也不会随之改变
f[2][1] = 11
print(e, f)

# 定义一个x为常数或字符串
x = '1'
y = x
z = copy.copy(x)
o = copy.deepcopy(x)
# 输出x，y，z，o在计算机中占用的内存位置，会发现是相同的
print(id(x), id(y), id(z), id(o))

# 以上说明：当变量为常数或字符串时，不管是赋值，浅拷贝还是深拷贝，得到的结果都是一样的，都只是复制的计算机的位置索引
#           当变量为列表，元组或字典时，赋值方法复制的是计算机的位置索引，
#               浅拷贝会重新创建列表嵌套的最外层列表，内层列表还只是复制的计算机的位置索引，
#               深拷贝才会重新在计算机中完全创建一个新的变量。